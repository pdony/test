"use strict";

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.highlightNode = highlightNode;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.function.name");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.for-each");

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getParts(name, highlight) {
  var nameParts = [];
  var last = 0;
  highlight.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        start = _ref2[0],
        end = _ref2[1];

    if (last < start) {
      nameParts.push({
        strong: false,
        text: name.substring(last, start)
      });
    }

    nameParts.push({
      strong: true,
      text: name.substring(start, end + 1)
    });
    last = end + 1;
  });

  if (last < name.length) {
    nameParts.push({
      strong: false,
      text: name.substring(last, name.length)
    });
  }

  return nameParts;
}

function highlightNode(node, style) {
  var name = node.name,
      highlight = node.highlight;

  if (!highlight || !highlight.length) {
    return name;
  }

  var nameParts = getParts(name, highlight);
  return nameParts.filter(function (part) {
    return part.text;
  }).map(function (part, index) {
    var key = "".concat(part.text, "-").concat(index);

    if (part.strong) {
      return _react.default.createElement("strong", {
        key: key,
        style: style.highLightText
      }, part.text);
    }

    return _react.default.createElement("span", {
      key: key
    }, part.text);
  });
}